import discord
import json
from discord.ext import commands
from discord.ui import Button, View
from utils.Tools import *

class Verification(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.Cog.listener()
    async def on_interaction(self, interaction):
        with open("db/verification.json", "r") as f:
            data = json.load(f)
        if str(interaction.message.guild.id) not in data:
            return
        elif interaction.data["custom_id"] != "Verify":
            return
        else:
            role = interaction.message.guild.get_role(int(data[str(interaction.message.guild.id)]["role"]))
            if role in interaction.user.roles:
                return await interaction.response.send_message(content="You are already verified!", ephemeral=True)
            else:
                try:
                    await interaction.user.add_roles(role)
                    await interaction.response.send_message(content="You are now officially verified in this server!", ephemeral=True)
                except Exception as e:
                    await interaction.response.send_message(content=f"Oops! There was something wrong while adding role. | {e}", ephemeral=True)

    @commands.hybrid_group(name="verification", description="Manage server verification.")
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.max_concurrency(1, per=commands.BucketType.default, wait=False)
    @commands.guild_only()
    @blacklist_check()
    @ignore_check()
    @iuser_check()
    async def _verify(self, ctx):
        if ctx.subcommand_passed is None:
            await ctx.send_help(ctx.command)
            ctx.command.reset_cooldown(ctx)

    @_verify.command(name="enable", description="Enable verification in the server.")
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.max_concurrency(1, per=commands.BucketType.default, wait=False)
    @commands.guild_only()
    @blacklist_check()
    @ignore_check()
    @iuser_check()
    async def verify_enable(self, ctx, channel: discord.TextChannel, role: discord.Role):
        with open('db/verification.json', 'r') as f:
            data = json.load(f)
        if str(ctx.guild.id) in data:
            await ctx.send("Verification is already enabled in this server! Please disable it first using the `verification disable` command before trying again.")
        else:
            setup_embed = discord.Embed(
                title="Verification Setup",
                description="Setting up verification, please be patient...",
                color=0xFF5733
            )
            setup_message = await ctx.send(embed=setup_embed)

            btn = Button(style=discord.ButtonStyle.green, label="Verify", emoji="âœ…", custom_id="Verify")
            view = View()
            view.add_item(btn)

            embed = discord.Embed(
                title="Server Verification",
                description=f"Welcome to **{ctx.guild.name}**! To gain access to the server, please verify yourself by pressing the **Verify** button below.",
                color=0x00FFED
            )
            embed.set_thumbnail(url=ctx.guild.icon_url)
            embed.set_footer(text="Server Verification", icon_url=ctx.guild.icon_url)

            verification_message = await channel.send(embed=embed, view=view)
            await setup_message.delete()
            await ctx.send("Successfully completed verification setup!")

            data[str(ctx.guild.id)] = {
                'role': str(role.id),
                'msg': verification_message.id,
                'channel': channel.id
            }

            with open("db/verification.json", "w") as f:
                json.dump(data, f, indent=4)

    @_verify.command(name="disable", description="Disable verification in the server.")
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.max_concurrency(1, per=commands.BucketType.default, wait=False)
    @commands.guild_only()
    @blacklist_check()
    @ignore_check()
    @iuser_check()
    async def verify_disable(self, ctx):
        with open("db/verification.json", 'r') as f:
            data = json.load(f)
        if str(ctx.guild.id) not in data:
            await ctx.send("Verification isn't enabled in this server!")
        else:
            msg_id = data[str(ctx.guild.id)]["msg"]
            channel = ctx.guild.get_channel(data[str(ctx.guild.id)]["channel"])
            try:
                msg = await channel.fetch_message(int(msg_id))
                await msg.delete()
            except Exception as e:
                await ctx.send(f"Failed to delete verification message: {e}")
            del data[str(ctx.guild.id)]
            with open("db/verification.json", "w") as f:
                json.dump(data, f, indent=4)
            await ctx.send("Successfully disabled verification system in this guild!")

    @_verify.command(name="config", description="Shows configuration for verification in this guild.")
    @commands.has_permissions(administrator=True)
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.max_concurrency(1, per=commands.BucketType.default, wait=False)
    @commands.guild_only()
    @blacklist_check()
    @ignore_check()
    @iuser_check()
    async def verify_config(self, ctx):
        with open("db/verification.json", "r") as f:
            data = json.load(f)
        embed = discord.Embed(
            title="Verification Configuration",
            color=0x00FFED
        )
        embed.add_field(name="Verification Enabled?", value="Yes" if str(ctx.guild.id) in data else "No", inline=False)
        if str(ctx.guild.id) in data:
            chan = data[str(ctx.guild.id)]["channel"]
            role = int(data[str(ctx.guild.id)]["role"])
            embed.add_field(name="Channel", value=f"<#{chan}>", inline=False)
            embed.add_field(name="Role", value=f"<@&{role}>", inline=False)
        await ctx.send(embed=embed)
